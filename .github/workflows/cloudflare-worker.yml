name: Deploy to Cloudflare Worker

on:
  push:
    branches: [main, staging]

permissions:
  contents: read
  deployments: write

jobs:
  build-and-deploy-staging:
    if: github.ref == 'refs/heads/staging'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build worker
        run: |
          echo "Building worker..."
          pnpm webpack --config webpack.worker.js --mode production
          
          # Verify worker build succeeded
          if [ ! -f "dist/worker/worker.js" ]; then
            echo "Error: Worker build failed - worker.js not found"
            exit 1
          fi

      - name: Generate Wrangler Config
        run: |
          chmod +x ./scripts/generate-wrangler-config.sh
          ./scripts/generate-wrangler-config.sh
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          STAGING_DB_ID: ${{ secrets.STAGING_DB_ID }}
          STAGING_KV_ID: ${{ secrets.STAGING_KV_ID }}
          PROD_DB_ID: ${{ secrets.PROD_DB_ID }}
          PROD_KV_ID: ${{ secrets.PROD_KV_ID }}

      - name: Deploy Worker (Staging)
        run: |
          # Basic syntax check using node
          if ! node --check dist/worker/worker.js; then
            echo "Error: worker.js contains syntax errors"
            exit 1
          fi

          # Deploy worker
          echo "Deploying worker to staging..."
          wrangler deploy --config wrangler.worker.toml --env staging dist/worker/worker.js

          # Verify deployment
          echo "Verifying staging deployment..."
          node scripts/deploy/verify-deployment.js staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

  build-and-deploy-production:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build worker
        run: |
          echo "Building worker..."
          pnpm webpack --config webpack.worker.js --mode production
          
          # Verify worker build succeeded
          if [ ! -f "dist/worker/worker.js" ]; then
            echo "Error: Worker build failed - worker.js not found"
            exit 1
          fi

      - name: Generate Wrangler Config
        run: |
          chmod +x ./scripts/generate-wrangler-config.sh
          ./scripts/generate-wrangler-config.sh
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          STAGING_DB_ID: ${{ secrets.STAGING_DB_ID }}
          STAGING_KV_ID: ${{ secrets.STAGING_KV_ID }}
          PROD_DB_ID: ${{ secrets.PROD_DB_ID }}
          PROD_KV_ID: ${{ secrets.PROD_KV_ID }}

      - name: Deploy Worker (Production)
        run: |
          # Basic syntax check using node
          if ! node --check dist/worker/worker.js; then
            echo "Error: worker.js contains syntax errors"
            exit 1
          fi

          # Deploy worker
          echo "Deploying worker to production..."
          wrangler deploy --config wrangler.worker.toml --env production dist/worker/worker.js

          # Verify deployment
          echo "Verifying production deployment..."
          node scripts/deploy/verify-deployment.js production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}