name: CI/CD

on:
  push:
    branches: [main, staging]
    tags: ['v*']
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Install Puppeteer browsers
        run: npx puppeteer browsers install chrome

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run linting
        run: pnpm turbo lint

      - name: Run unit tests
        run: pnpm vitest run tests/dashboard/App.test.jsx tests/setup.test.js
        env:
          CI: true
          CHROME_PATH: /usr/bin/google-chrome

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage/
            docs/screenshots/e2e-debug/**/*.png
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

      - name: Build all packages
        if: success()
        run: |
          # Build the worker in its own directory
          mkdir -p dist/worker
          pnpm webpack --config webpack.worker.js --mode production --output-path dist/worker
          
          # Build the dashboard and extension
          pnpm turbo build
          
          # Move built files to dashboard directory
          mkdir -p dist/dashboard
          mv dist/*.{js,html,json} dist/dashboard/ 2>/dev/null || true
          mv dist/icons dist/dashboard/ 2>/dev/null || true
        env:
          NODE_ENV: production

      - name: Run E2E tests
        id: e2e_tests
        if: success()
        continue-on-error: true
        run: |
          mkdir -p docs/screenshots/e2e-debug
          xvfb-run --auto-servernum pnpm turbo test:e2e
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: ${{ github.event_name == 'pull_request' }}
          SCREENSHOT_DIR: docs/screenshots/e2e-debug

      # Fail the workflow if E2E tests failed
      - name: Check E2E test results
        if: steps.e2e_tests.outcome == 'failure'
        run: exit 1

      - name: Package Extension
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          pushd dist
          zip -r ../chronicle-sync.zip *
          popd

      - name: Configure GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          name: github-pages-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}

      - name: Install Wrangler
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: pnpm add -g wrangler@latest

      - name: Generate Wrangler Config
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: ./scripts/generate-wrangler-config.sh
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROD_DB_ID: ${{ secrets.PROD_DB_ID }}
          PROD_KV_ID: ${{ secrets.PROD_KV_ID }}
          STAGING_DB_ID: ${{ secrets.STAGING_DB_ID }}
          STAGING_KV_ID: ${{ secrets.STAGING_KV_ID }}

      - name: Deploy to Cloudflare Pages (Staging)
        if: success() && github.ref == 'refs/heads/main'
        run: |
          # Create project if it doesn't exist (this is idempotent)
          wrangler pages project create chronicle-sync --production-branch main || true

          # Deploy worker first (from worker directory)
          if [ -d "dist/worker" ]; then
            pushd dist/worker
            wrangler deploy --config ../../wrangler.worker.toml
            popd
          else
            echo "Error: dist/worker directory does not exist. Build may have failed."
            exit 1
          fi

          # Then deploy pages
          if [ -d "dist/dashboard" ]; then
            wrangler pages deploy dist/dashboard --project-name chronicle-sync --branch staging --commit-dirty=true
          else
            echo "Error: dist/dashboard directory does not exist. Build may have failed."
            exit 1
          fi

          # Add custom domains if DOMAIN is set
          if [ ! -z "$DOMAIN" ]; then
            # Add staging subdomain
            wrangler pages domain add chronicle-sync "staging.$DOMAIN" || true
            
            # Configure DNS for staging
            ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | jq -r '.result[0].id')
            
            if [ ! -z "$ZONE_ID" ]; then
              # Create/update CNAME record for staging
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"CNAME\",
                  \"name\": \"staging\",
                  \"content\": \"staging.chronicle-sync.pages.dev\",
                  \"proxied\": true
                }"
            fi
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DOMAIN: ${{ secrets.CLOUDFLARE_DOMAIN }}



      - name: Create Beta Release
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          name: "Beta (Staging)"
          tag_name: beta
          prerelease: true
          body: |
            Beta version of Chronicle Sync extension connected to staging environment.
            This version is automatically updated when changes are merged to main.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to Cloudflare Pages (Production)
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          # Create project if it doesn't exist (this is idempotent)
          wrangler pages project create chronicle-sync --production-branch main || true

          # Deploy worker first (from worker directory)
          if [ -d "dist/worker" ]; then
            pushd dist/worker
            wrangler deploy --config ../../wrangler.worker.toml
            popd
          else
            echo "Error: dist/worker directory does not exist. Build may have failed."
            exit 1
          fi

          # Then deploy pages
          if [ -d "dist/dashboard" ]; then
            wrangler pages deploy dist/dashboard --project-name chronicle-sync --branch main --commit-dirty=true
          else
            echo "Error: dist/dashboard directory does not exist. Build may have failed."
            exit 1
          fi

          # Add custom domains if DOMAIN is set
          if [ ! -z "$DOMAIN" ]; then
            # Add production domain
            wrangler pages domain add chronicle-sync "$DOMAIN" || true
            
            # Configure DNS for production
            ZONE_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones?name=$DOMAIN" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | jq -r '.result[0].id')
            
            if [ ! -z "$ZONE_ID" ]; then
              # Create/update CNAME record for production
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"CNAME\",
                  \"name\": \"@\",
                  \"content\": \"chronicle-sync.pages.dev\",
                  \"proxied\": true
                }"

              # Also add www subdomain
              curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$ZONE_ID/dns_records" \
                -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data "{
                  \"type\": \"CNAME\",
                  \"name\": \"www\",
                  \"content\": \"chronicle-sync.pages.dev\",
                  \"proxied\": true
                }"
            fi
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          DOMAIN: ${{ secrets.CLOUDFLARE_DOMAIN }}



      - name: Create Production Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-staging-integration:
    needs: test-and-deploy
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run staging integration tests
        run: |
          # Create screenshots directory
          mkdir -p docs/screenshots/staging-flow
          
          # Wait for deployment to be fully ready
          sleep 30
          
          # Run tests with screenshot generation enabled
          xvfb-run --auto-servernum pnpm run test:integration:staging
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: true
          SCREENSHOT_DIR: docs/screenshots/staging-flow
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-test-artifacts
          path: |
            docs/screenshots/**/*.png
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

  test-production-integration:
    needs: test-and-deploy
    if: success() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run production integration tests
        run: |
          # Create screenshots directory
          mkdir -p docs/screenshots/production-flow
          
          # Wait for deployment to be fully ready
          sleep 30
          
          # Run tests with screenshot generation enabled
          xvfb-run --auto-servernum pnpm run test:integration:production
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: true
          SCREENSHOT_DIR: docs/screenshots/production-flow
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-test-artifacts
          path: |
            docs/screenshots/**/*.png
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore