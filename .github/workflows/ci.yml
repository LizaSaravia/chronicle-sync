name: CI/CD

on:
  push:
    branches: [main, staging]
    tags: ['v*']
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run linting
        run: pnpm turbo lint

      - name: Run unit tests
        run: pnpm vitest run tests/dashboard/App.test.jsx tests/setup.test.js
        env:
          CI: true

      - name: Upload test coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 14

      - name: Build all packages
        if: success()
        run: |
          # Build the worker
          pnpm webpack --config webpack.worker.js --mode production
          # Build the dashboard and extension
          pnpm turbo build
        env:
          NODE_ENV: production

      - name: Install Chrome
        if: success()
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable

      - name: Run E2E tests
        id: e2e_tests
        if: success()
        continue-on-error: true
        run: |
          mkdir -p docs/screenshots/e2e-debug
          xvfb-run --auto-servernum pnpm turbo test:e2e
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: ${{ github.event_name == 'pull_request' }}
          SCREENSHOT_DIR: docs/screenshots/e2e-debug

      - name: Upload E2E debug artifacts
        if: steps.e2e_tests.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: e2e-debug-artifacts
          path: |
            docs/screenshots/e2e-debug/**/*.png
            tests/logs/
          retention-days: 7
          if-no-files-found: ignore

      # Fail the workflow if E2E tests failed
      - name: Check E2E test results
        if: steps.e2e_tests.outcome == 'failure'
        run: exit 1

      - name: Package Extension
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          cd dist
          zip -r ../chronicle-sync.zip *

      - name: Configure GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          name: github-pages-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}

      - name: Install Wrangler
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: pnpm add -g wrangler@latest

      - name: Generate Wrangler Config
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: ./scripts/generate-wrangler-config.sh
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          PROD_DB_ID: ${{ secrets.PROD_DB_ID }}
          PROD_KV_ID: ${{ secrets.PROD_KV_ID }}
          STAGING_DB_ID: ${{ secrets.STAGING_DB_ID }}
          STAGING_KV_ID: ${{ secrets.STAGING_KV_ID }}

      - name: Deploy Worker to Cloudflare Staging
        if: success() && github.ref == 'refs/heads/main'
        run: |
          # Deploy worker
          wrangler deploy --env staging
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Dashboard to Cloudflare Pages (Staging)
        if: success() && github.ref == 'refs/heads/main'
        run: |
          # Create Pages project if it doesn't exist
          wrangler pages project create chronicle-sync-dashboard --production-branch main || true
          
          # Deploy dashboard
          wrangler pages deploy dist/dashboard \
            --project-name chronicle-sync-dashboard \
            --branch staging \
            --commit-dirty=true \
            --compatibility-date 2024-01-05
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create Beta Release
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          name: "Beta (Staging)"
          tag_name: beta
          prerelease: true
          body: |
            Beta version of Chronicle Sync extension connected to staging environment.
            This version is automatically updated when changes are merged to main.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy Worker to Cloudflare Production
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          # Deploy worker
          wrangler deploy --env production
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Deploy Dashboard to Cloudflare Pages (Production)
        if: success() && startsWith(github.ref, 'refs/tags/v')
        run: |
          # Deploy dashboard to production (main branch)
          wrangler pages deploy dist/dashboard \
            --project-name chronicle-sync-dashboard \
            --branch main \
            --commit-dirty=true \
            --compatibility-date 2024-01-05
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Create Production Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-staging-integration:
    needs: test-and-deploy
    if: success() && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
      
      - name: Run staging integration tests and generate screenshots
        run: |
          # Create screenshots directory
          mkdir -p docs/screenshots/staging-flow
          
          # Wait for staging deployment to be fully ready
          sleep 30
          
          # Run tests with screenshot generation enabled
          xvfb-run --auto-servernum npm run test:integration:staging
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: true
          SCREENSHOT_DIR: docs/screenshots/staging-flow
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: staging-test-artifacts
          path: |
            docs/screenshots/**/*.png
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

  test-production-integration:
    needs: test-and-deploy
    if: success() && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Chrome
        uses: browser-actions/setup-chrome@v1
        with:
          chrome-version: stable
      
      - name: Run production integration tests and generate screenshots
        run: |
          # Create screenshots directory
          mkdir -p docs/screenshots/production-flow
          
          # Wait for production deployment to be fully ready
          sleep 30
          
          # Run tests with screenshot generation enabled
          xvfb-run --auto-servernum npm run test:integration:prod
        env:
          CI: true
          DISPLAY: :99
          CHROME_PATH: /usr/bin/google-chrome
          SCREENSHOTS_FOR_DOCS: true
          SCREENSHOT_DIR: docs/screenshots/production-flow
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: production-test-artifacts
          path: |
            docs/screenshots/**/*.png
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore