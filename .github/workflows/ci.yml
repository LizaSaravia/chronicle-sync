name: CI/CD

on:
  push:
    branches: [main, staging]
    tags: ['v*']
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  js-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm store prune
          pnpm install --frozen-lockfile

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run JavaScript linting
        run: pnpm lint

      - name: Run JavaScript unit tests
        run: pnpm test:unit
        env:
          CI: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: js-test-artifacts
          path: |
            coverage/
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

  python-checks:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: worker_py
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        id: poetry-cache
        with:
          path: worker_py/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('worker_py/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: poetry install

      - name: Run Python linting
        run: |
          # Run black with config from pyproject.toml
          poetry run black --check .
          # Run isort with config from pyproject.toml
          poetry run isort --check .
          # Run flake8 with config from .flake8
          poetry run flake8 .
          # Run mypy with config from pyproject.toml
          poetry run mypy src tests

      - name: Run Python unit tests
        run: poetry run pytest tests/ -v

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-test-artifacts
          path: |
            worker_py/.coverage
            worker_py/htmlcov/
            worker_py/.pytest_cache/
          retention-days: 14
          if-no-files-found: ignore

  e2e-and-deploy:
    needs: [js-checks, python-checks]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Install dependencies
        run: |
          pnpm store prune
          pnpm install --frozen-lockfile
          cd worker_py && poetry install

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run linting
        run: pnpm turbo lint

      - name: Run unit tests
        run: pnpm run test:unit
        env:
          CI: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage/
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: docs/screenshots/e2e-debug/**/*.png
          retention-days: 14
          if-no-files-found: ignore

      - name: Install Xvfb and xauth
        run: |
          sudo apt-get update
          sudo apt-get install -y xvfb xauth

      - name: Run E2E tests
        id: e2e_tests
        if: success()
        continue-on-error: true
        run: |
          # Ensure screenshot directory exists and is empty
          rm -rf docs/screenshots/e2e-debug
          mkdir -p docs/screenshots/e2e-debug
          
          # Run tests based on environment
          if [ -n "${{ secrets.SAUCE_USERNAME }}" ] && [ -n "${{ secrets.SAUCE_ACCESS_KEY }}" ]; then
            echo "Running tests on SauceLabs..."
            SAUCE_USERNAME=${{ secrets.SAUCE_USERNAME }} \
            SAUCE_ACCESS_KEY=${{ secrets.SAUCE_ACCESS_KEY }} \
            NODE_ENV=test pnpm run build && pnpm exec playwright test --config=playwright.sauce.config.ts
          else
            echo "Running tests with Xvfb..."
            NODE_ENV=test pnpm run build && xvfb-run --auto-servernum --server-args="-screen 0 1280x960x24" \
            pnpm exec playwright test --config=playwright.ci.config.ts
          fi
        env:
          CI: true
          SCREENSHOTS_FOR_DOCS: ${{ github.event_name == 'pull_request' }}
          SCREENSHOT_DIR: docs/screenshots/e2e-debug

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: docs/screenshots/e2e-debug/**/*.png
          retention-days: 14
          if-no-files-found: ignore

      # Fail the workflow if E2E tests failed
      - name: Check E2E test results
        if: steps.e2e_tests.outcome == 'failure'
        run: exit 1

      - name: Build extension and worker
        if: success()
        run: |
          # Build extension and worker
          echo "Building extension and worker..."
          pnpm run build
          
          # Verify builds succeeded
          echo "Verifying build outputs..."
          echo "Extension files:"
          ls -la dist/extension/
          echo "Worker files:"
          ls -la worker_py/
        env:
          NODE_ENV: production

      - name: Package Extension
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          # Only package the extension files, not dashboard or worker
          pushd dist/extension
          zip -r ../../chronicle-sync.zip *
          popd

      - name: Configure GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          name: github-pages-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
          retention-days: 7  # Increased retention period for better debugging

      - name: Create Beta Release
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v2
        with:
          files: chronicle-sync.zip
          name: "Beta (Staging)"
          tag_name: beta
          prerelease: true
          body: |
            Beta version of Chronicle Sync extension connected to staging environment.
            This version is automatically updated when changes are merged to main.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Production Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          files: chronicle-sync.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
