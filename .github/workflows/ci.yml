name: CI/CD

on:
  push:
    branches: [main, staging]
    tags: ['v*']
  pull_request:
    branches: [main, staging]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: pnpm/action-setup@v3
        with:
          version: 9.15.2

      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          pnpm store prune
          pnpm install --frozen-lockfile

      - name: Setup Turbo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: ${{ runner.os }}-turbo-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-turbo-

      - name: Run linting
        run: pnpm turbo lint

      - name: Run unit tests
        run: pnpm run test:unit
        env:
          CI: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            coverage/
            tests/logs/
          retention-days: 14
          if-no-files-found: ignore

      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: docs/screenshots/e2e-debug/**/*.png
          retention-days: 14
          if-no-files-found: ignore

      - name: Build extension and dashboard
        if: success()
        run: |
          # First build the extension
          echo "Building extension..."
          pnpm webpack --config webpack.config.js --mode production
          
          # Check if extension build produced expected files
          if [ ! -f "dist/popup.html" ] || [ ! -f "dist/options.html" ]; then
            echo "Error: Extension build failed - HTML files not found"
            ls -la dist/
            exit 1
          fi
          
          # Create extension directory and move extension files
          mkdir -p dist/extension
          mv dist/*.js dist/*.html dist/manifest.json dist/extension/
          if [ -d "dist/icons" ]; then
            mv dist/icons dist/extension/
          fi
          
          # Now build the dashboard
          echo "Building dashboard..."
          pnpm webpack --config webpack.dashboard.js --mode production
          
          # Verify both builds succeeded
          echo "Verifying build outputs..."
          echo "Extension files:"
          ls -la dist/extension/
          echo "Dashboard files:"
          ls -la dist/dashboard/
        env:
          NODE_ENV: production

      - name: Build worker
        if: success()
        run: |
          # Ensure clean worker directory exists
          rm -rf dist/worker
          mkdir -p dist/worker
          echo "Created dist/worker directory:"
          ls -la dist/

          # Build the worker
          echo "Building worker..."
          pnpm webpack --config webpack.worker.js --mode production
          
          # Debug output
          echo "Contents of dist directory:"
          ls -la dist/
          echo "Contents of dist/worker directory:"
          ls -la dist/worker/ || echo "dist/worker directory not found!"
          
          # Verify worker build succeeded
          if [ ! -f "dist/worker/worker.js" ]; then
            echo "Error: Worker build failed - worker.js not found"
            echo "Current directory: $(pwd)"
            echo "Webpack worker config:"
            cat webpack.worker.js
            exit 1
          fi

      - name: Install Playwright
        if: success()
        run: |
          # Install Playwright and its dependencies
          pnpm exec playwright install --with-deps chromium

      - name: Run E2E tests
        id: e2e_tests
        if: success()
        continue-on-error: true
        run: |
          # Ensure screenshot directory exists and is empty
          rm -rf docs/screenshots/e2e-debug
          mkdir -p docs/screenshots/e2e-debug
          
          # Run tests on SauceLabs
          SAUCE_USERNAME=${{ secrets.SAUCE_USERNAME }} \
          SAUCE_ACCESS_KEY=${{ secrets.SAUCE_ACCESS_KEY }} \
          NODE_ENV=test pnpm run build && pnpm exec playwright test --config=playwright.sauce.config.ts
        env:
          CI: true
          SCREENSHOTS_FOR_DOCS: ${{ github.event_name == 'pull_request' }}
          SCREENSHOT_DIR: docs/screenshots/e2e-debug

      # Upload screenshots if they were created
      - name: Upload screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ github.sha }}
          path: docs/screenshots/e2e-debug/**/*.png
          retention-days: 14
          if-no-files-found: ignore

      # Fail the workflow if E2E tests failed
      - name: Check E2E test results
        if: steps.e2e_tests.outcome == 'failure'
        run: exit 1

      - name: Package Extension
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
        run: |
          pushd dist
          zip -r ../chronicle-sync.zip *
          popd



      - name: Configure GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: './docs'
          name: github-pages-${{ github.run_id }}

      - name: Deploy to GitHub Pages
        if: success() && github.ref == 'refs/heads/main'
        uses: actions/deploy-pages@v4
        with:
          artifact_name: github-pages-${{ github.run_id }}

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: |
            dist/
          retention-days: 7  # Increased retention period for better debugging

      - name: Create Beta Release
        if: success() && github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          name: "Beta (Staging)"
          tag_name: beta
          prerelease: true
          body: |
            Beta version of Chronicle Sync extension connected to staging environment.
            This version is automatically updated when changes are merged to main.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Production Release
        if: success() && startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: chronicle-sync.zip
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}