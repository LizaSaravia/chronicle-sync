name: Feature Deploy

on:
  push:
    branches:
      - 'feature/*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: feature
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=${GITHUB_REF#refs/heads/feature/}" >> $GITHUB_ENV
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      
      - name: Configure ECR repository
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ env.BRANCH_NAME }}
        run: |
          # Create ECR repository if it doesn't exist
          aws ecr describe-repositories --repository-names chronicle-sync || \
            aws ecr create-repository \
              --repository-name chronicle-sync \
              --image-scanning-configuration scanOnPush=true
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/chronicle-sync:${{ env.BRANCH_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Deploy feature environment
        env:
          BRANCH_URL: ${{ env.BRANCH_NAME }}.dev.chronicle-sync.dev
        run: |
          # Update ECS service with new image
          aws ecs update-service \
            --cluster chronicle-sync-feature \
            --service ${{ env.BRANCH_NAME }} \
            --force-new-deployment
          
          # Create/update Route53 record
          aws route53 change-resource-record-sets \
            --hosted-zone-id ${{ secrets.HOSTED_ZONE_ID }} \
            --change-batch '{
              "Changes": [{
                "Action": "UPSERT",
                "ResourceRecordSet": {
                  "Name": "'$BRANCH_URL'",
                  "Type": "A",
                  "AliasTarget": {
                    "HostedZoneId": "'${{ secrets.ALB_ZONE_ID }}'",
                    "DNSName": "'${{ secrets.ALB_DNS_NAME }}'",
                    "EvaluateTargetHealth": true
                  }
                }
              }]
            }'
      
      - name: Build extensions
        env:
          SYNC_URL: https://${{ env.BRANCH_NAME }}.dev.chronicle-sync.dev
          VERSION: 0.0.0-dev.${{ env.BRANCH_NAME }}.${{ github.sha }}
        run: |
          # Update version and sync URL in manifests
          jq --arg v "$VERSION" '.version = $v' apps/chrome/src/manifest.json > tmp && mv tmp apps/chrome/src/manifest.json
          jq --arg v "$VERSION" '.version = $v' apps/firefox/src/manifest.json > tmp && mv tmp apps/firefox/src/manifest.json
          
          # Build extensions
          npm ci
          npm run build:packages
          npm run build:chrome
          npm run build:firefox
      
      - name: Upload extension artifacts
        uses: actions/upload-artifact@v3
        with:
          name: extensions
          path: |
            apps/chrome/dist
            apps/firefox/dist
      
      - name: Comment on PR
        uses: actions/github-script@v7
        with:
          script: |
            const branchUrl = `https://${process.env.BRANCH_NAME}.dev.chronicle-sync.dev`;
            const comment = `ðŸš€ Feature environment deployed!\n\n` +
              `- Backend: ${branchUrl}\n` +
              `- Extensions: Download from Actions tab\n` +
              `- Version: ${process.env.VERSION}\n\n` +
              `To test the extensions:\n` +
              `1. Download the artifacts from the Actions tab\n` +
              `2. Load as unpacked extension in Chrome/Firefox\n` +
              `3. Connect to ${branchUrl}`;
            
            const { data: pulls } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            });
            
            if (pulls.length > 0) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pulls[0].number,
                body: comment
              });
            }