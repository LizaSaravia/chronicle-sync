name: CI/CD Workflow

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' && 'production' || 'staging') || '' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      VERSION: ${{ github.ref == 'refs/heads/main' && format('0.0.0-main.{0}', github.run_number) || format('0.0.0-beta.{0}', github.run_number) }}
      SYNC_URL: ${{ github.ref == 'refs/heads/main' && 'https://sync.chronicle-sync.dev' || 'https://staging.chronicle-sync.dev' }}
      SHOULD_DEPLOY: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging') }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install dependencies
        run: npm ci
      # Run verification steps first
      - name: Lint and test
        run: |
          npm run lint
          npm test
          npm run test:e2e
      
      # Build all packages and extensions
      - name: Build packages
        run: npm run build:packages
      
      # Quick Docker syntax check for PRs
      - name: Validate Dockerfile
        if: env.SHOULD_DEPLOY != 'true'
        run: docker run --rm -i hadolint/hadolint < Dockerfile
      
      # Only set up Docker and build image when deploying
      - name: Set up Docker Buildx
        if: env.SHOULD_DEPLOY == 'true'
        uses: docker/setup-buildx-action@v3
      
      # Configure AWS and ECR only if deploying
      - name: Configure AWS credentials
        if: env.SHOULD_DEPLOY == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        if: env.SHOULD_DEPLOY == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      
      # Build Docker image only when deploying
      - name: Build and push Docker image
        if: env.SHOULD_DEPLOY == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ format('{0}/chronicle-sync:{1}', steps.login-ecr.outputs.registry, env.VERSION) }}
      
      # Deploy steps only run on push to main/staging
      - name: Deploy backend
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          aws ecs update-service \
            --cluster chronicle-sync-${{ env.ENV_NAME }} \
            --service sync \
            --force-new-deployment
      
      - name: Build and package extensions
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          infrastructure/ci/build-extensions.sh "$VERSION" "$SYNC_URL"
      
      - name: Upload extension artifacts
        if: env.SHOULD_DEPLOY == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: browser-extensions
          path: |
            chronicle-sync-chrome.zip
            chronicle-sync-firefox.zip
          
      - name: Create GitHub Release
        if: env.SHOULD_DEPLOY == 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Create a new release
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes "Browser extensions for Chronicle Sync v${{ env.VERSION }}" \
            chronicle-sync-chrome.zip \
            chronicle-sync-firefox.zip
      
      - name: Deploy web interface
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          cd apps/web
          aws s3 sync dist/ s3://chronicle-sync-${{ env.ENV_NAME }}/ --delete
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Notify deployment
        if: env.SHOULD_DEPLOY == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const env = process.env.ENV_NAME;
            const version = process.env.VERSION;
            const url = process.env.SYNC_URL;
            
            const message = `ðŸš€ Deployed to ${env}!\n\n` +
              `- Version: ${version}\n` +
              `- Backend: ${url}\n` +
              `- Web Interface: https://app.chronicle-sync.dev\n` +
              `- Extensions: ${env === 'staging' ? 'Available in beta channels' : 'Published to stores'}\n\n` +
              `Monitor deployment status in [AWS Console](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/chronicle-sync-${env}/services/sync/events)`;
            
            if (context.ref === 'refs/heads/main') {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Production Deployment - ${version}`,
                body: message,
                labels: ['deployment']
              });
            } else {
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open'
              });
              
              if (pulls.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pulls[0].number,
                  body: message
                });
              }
            }
