name: CI/CD Workflow

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-cd:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' && 'production' || 'staging') || '' }}
    env:
      ENV_NAME: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
      VERSION: ${{ github.ref == 'refs/heads/main' && format('0.0.0-main.{0}', github.run_number) || format('0.0.0-beta.{0}', github.run_number) }}
      SYNC_URL: ${{ github.ref == 'refs/heads/main' && 'https://sync.chronicle-sync.dev' || 'https://staging.chronicle-sync.dev' }}
      SHOULD_DEPLOY: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging') }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # Run verification steps first
      - name: Lint and test
        run: |
          npm run lint
          npm test
          npm run test:e2e
      
      # Build all packages and extensions
      - name: Build packages
        run: npm run build:packages
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Configure AWS and ECR only if deploying
      - name: Configure AWS credentials
        if: env.SHOULD_DEPLOY == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        if: env.SHOULD_DEPLOY == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: true
      
      # Build Docker image (PR check)
      - name: Build Docker image
        if: env.SHOULD_DEPLOY != 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: chronicle-sync:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Build and push Docker image (staging/main)
      - name: Build and push Docker image
        if: env.SHOULD_DEPLOY == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/chronicle-sync:${{ env.VERSION }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Deploy steps only run on push to main/staging
      - name: Deploy backend
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          aws ecs update-service \
            --cluster chronicle-sync-${{ env.ENV_NAME }} \
            --service sync \
            --force-new-deployment
      
      - name: Build extensions
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          # Update version and sync URL in manifests
          jq --arg v "$VERSION" --arg u "$SYNC_URL" \
            '.version = $v | .sync_url = $u' \
            apps/chrome/src/manifest.json > tmp && mv tmp apps/chrome/src/manifest.json
          jq --arg v "$VERSION" --arg u "$SYNC_URL" \
            '.version = $v | .sync_url = $u' \
            apps/firefox/src/manifest.json > tmp && mv tmp apps/firefox/src/manifest.json
          
          # Build extensions
          npm run build:chrome
          npm run build:firefox
          npm run build:web
      
      - name: Package extensions
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          cd apps/chrome/dist && zip -r ../../../chronicle-sync-chrome.zip .
          cd ../../firefox/dist && zip -r ../../../chronicle-sync-firefox.zip .
      
      - name: Upload extensions
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            # Production: Upload to main store channels
            curl -H "Authorization: Bearer ${{ secrets.CHROME_STORE_TOKEN }}" \
                 -H "x-goog-api-version: 2" \
                 -X PUT -T chronicle-sync-chrome.zip \
                 https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.CHROME_STORE_ITEM_ID }}
            
            web-ext sign \
              --api-key=${{ secrets.AMO_JWT_ISSUER }} \
              --api-secret=${{ secrets.AMO_JWT_SECRET }}
          else
            # Staging: Upload to beta channels
            curl -H "Authorization: Bearer ${{ secrets.CHROME_STORE_TOKEN }}" \
                 -H "x-goog-api-version: 2" \
                 -X PUT -T chronicle-sync-chrome.zip \
                 https://www.googleapis.com/upload/chromewebstore/v1.1/items/${{ secrets.CHROME_STORE_ITEM_ID }}
            
            web-ext sign \
              --api-key=${{ secrets.AMO_JWT_ISSUER }} \
              --api-secret=${{ secrets.AMO_JWT_SECRET }} \
              --channel=beta
          fi
      
      - name: Deploy web interface
        if: env.SHOULD_DEPLOY == 'true'
        run: |
          cd apps/web
          aws s3 sync dist/ s3://chronicle-sync-${{ env.ENV_NAME }}/ --delete
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"
      
      - name: Notify deployment
        if: env.SHOULD_DEPLOY == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const env = process.env.ENV_NAME;
            const version = process.env.VERSION;
            const url = process.env.SYNC_URL;
            
            const message = `ðŸš€ Deployed to ${env}!\n\n` +
              `- Version: ${version}\n` +
              `- Backend: ${url}\n` +
              `- Web Interface: https://app.chronicle-sync.dev\n` +
              `- Extensions: ${env === 'staging' ? 'Available in beta channels' : 'Published to stores'}\n\n` +
              `Monitor deployment status in [AWS Console](https://console.aws.amazon.com/ecs/home?region=us-east-1#/clusters/chronicle-sync-${env}/services/sync/events)`;
            
            if (context.ref === 'refs/heads/main') {
              // Create a new issue for main branch deployment
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Production Deployment - ${version}`,
                body: message,
                labels: ['deployment']
              });
            } else {
              // Comment on the PR for staging
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`,
                state: 'open'
              });
              
              if (pulls.length > 0) {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pulls[0].number,
                  body: message
                });
              }
            }