name: Release Documentation

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual trigger for testing

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  update-docs:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@v1
      with:
        chrome-version: stable
    
    - name: Build project
      run: npm run build
      env:
        NODE_ENV: production

    - name: Run E2E tests for screenshots
      run: xvfb-run --auto-servernum npm run test:e2e
      env:
        DISPLAY: :99
        CHROME_PATH: /usr/bin/google-chrome
        SCREENSHOTS_FOR_DOCS: true  # Special flag to force screenshots in CI
    
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Generate screenshots gallery
      run: |
        mkdir -p docs/releases/${{ github.ref_name }}/screenshots
        cp -r tests/screenshots/* docs/releases/${{ github.ref_name }}/screenshots/ || true
        
        # Update latest release gallery
        echo "# Latest Release Test Results" > docs/latest-release.md
        echo "" >> docs/latest-release.md
        echo "Version: ${{ github.ref_name }}" >> docs/latest-release.md
        echo "Released: $(date)" >> docs/latest-release.md
        echo "" >> docs/latest-release.md
        echo "## Test Screenshots" >> docs/latest-release.md
        echo "" >> docs/latest-release.md
        
        for dir in docs/releases/${{ github.ref_name }}/screenshots/*; do
          if [ -d "$dir" ]; then
            test_name=$(basename "$dir")
            echo "### $test_name" >> docs/latest-release.md
            echo "" >> docs/latest-release.md
            
            for img in "$dir"/*.png; do
              if [ -f "$img" ]; then
                name=$(basename "$img")
                rel_path="releases/${{ github.ref_name }}/screenshots/$test_name/$name"
                echo "#### ${name%.png}" >> docs/latest-release.md
                echo "![${name%.png}]($rel_path)" >> docs/latest-release.md
                echo "" >> docs/latest-release.md
              fi
            done
          fi
        done
        
        # Update releases index
        echo "# Release History" > docs/releases/index.md
        echo "" >> docs/releases/index.md
        echo "## Latest Release" >> docs/releases/index.md
        echo "- [${{ github.ref_name }}](${{ github.ref_name }}/screenshots)" >> docs/releases/index.md
        echo "" >> docs/releases/index.md
        
        # List previous releases if they exist
        if [ -d "docs/releases" ]; then
          echo "## Previous Releases" >> docs/releases/index.md
          for ver in docs/releases/*/; do
            version=$(basename "$ver")
            if [ "$version" != "${{ github.ref_name }}" ]; then
              echo "- [$version]($version/screenshots)" >> docs/releases/index.md
            fi
          done
        fi
    
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: docs

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4